import { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Card, CardContent } from "../ui/card";
import { Button } from "../ui/button";
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "../ui/select";
import { Progress } from "../ui/progress";

import games from "../data/games";

export default function BoardGameRecommender() {
  const [step, setStep] = useState(0);
  const [genre, setGenre] = useState("");
  const [difficulty, setDifficulty] = useState("");
  const [playtime, setPlaytime] = useState("");
  const [mechanic, setMechanic] = useState("");
  const [results, setResults] = useState([]);

  useEffect(() => {
    if (step === steps.length) handleSearch();
  }, [step]);

  const nextStep = () => setStep((s) => s + 1);
  const prevStep = () => setStep((s) => Math.max(0, s - 1));
  const reset = () => {
    setStep(0);
    setGenre("");
    setDifficulty("");
    setPlaytime("");
    setMechanic("");
    setResults([]);
  };

  const handleSearch = () => {
    const filtered = games.filter(
      (game) =>
        (!genre || game.genre === genre) &&
        (!difficulty || game.difficulty === difficulty) &&
        (!playtime || game.playtime.includes(playtime)) &&
        (!mechanic || game.mechanics.includes(mechanic)) &&
        parseInt(game.players.split("‚Äì")[1]) >= 4
    );
    setResults(filtered);
  };

  const steps = [
    {
      question: "üé≠ –ö–∞–∫–æ–π –∂–∞–Ω—Ä –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?",
      value: genre,
      onChange: (value) => { setGenre(value); nextStep(); },
      options: ["–£–∂–∞—Å—ã", "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ", "–Æ–º–æ—Ä", "–≠–∫—à–µ–Ω", "–°—Ç—Ä–∞—Ç–µ–≥–∏—è", "–°–µ–º–µ–π–Ω–∞—è", "–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞"]
    },
    {
      question: "üß† –ù–∞—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞?",
      value: difficulty,
      onChange: (value) => { setDifficulty(value); nextStep(); },
      options: ["–ü—Ä–æ—Å—Ç–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–°–ª–æ–∂–Ω–∞—è"]
    },
    {
      question: "‚è≥ –°–∫–æ–ª—å–∫–æ –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∏–≥—Ä—É?",
      value: playtime,
      onChange: (value) => { setPlaytime(value); nextStep(); },
      options: ["15", "30", "60", "90", "120"]
    },
    {
      question: "‚öôÔ∏è –ö–∞–∫—É—é –º–µ—Ö–∞–Ω–∏–∫—É –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?",
      value: mechanic,
      onChange: (value) => { setMechanic(value); nextStep(); },
      options: ["–ö–æ–æ–ø–µ—Ä–∞—Ç–∏–≤", "–ú–∏–Ω–∏–∞—Ç—é—Ä—ã", "–ë—Ä–æ—Å–∫–∏ –∫—É–±–∏–∫–æ–≤", "–ö–∞—Ä—Ç–æ—á–Ω–∞—è –∏–≥—Ä–∞", "–°–∞–±–æ—Ç–∞–∂", "–ü–æ—Å—Ç—Ä–æ–π–∫–∞", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–°—é–∂–µ—Ç", "–°–∫—Ä—ã—Ç—ã–µ —Ä–æ–ª–∏", "–≠–∫–æ–Ω–æ–º–∏–∫–∞", "–ö–æ–Ω—Ç—Ä–æ–ª—å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π"]
    }
  ];

  return (
    <div className="p-4 space-y-4 max-w-md mx-auto">
      <h1 className="text-2xl font-bold text-center">üé≤ –ö–≤–∏–∑: –≤—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç–æ–ª–∫—É</h1>

      <Progress value={(step / steps.length) * 100} className="h-2" />

      <div className="flex justify-between items-center">
        {step > 0 && <Button onClick={prevStep} variant="outline">‚¨ÖÔ∏è –ù–∞–∑–∞–¥</Button>}
        <span className="text-muted-foreground text-sm">–®–∞–≥ {Math.min(step + 1, steps.length)} –∏–∑ {steps.length}</span>
      </div>

      <AnimatePresence mode="wait">
        {step < steps.length ? (
          <motion.div
            key={step}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            transition={{ duration: 0.3 }}
          >
            <p className="mb-2 text-lg">{steps[step].question}</p>
            <select
                className="border p-2 rounded w-full"
                value={steps[step].value}
                onChange={(e) => steps[step].onChange(e.target.value)}
            >
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç</option>
              {steps[step].options.map((opt) => (
                  <option key={opt} value={opt}>
                    {opt}
                  </option>
              ))}
            </select>
          </motion.div>
        ) : (
          <motion.div
            key="results"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.3 }}
            className="space-y-4"
          >
            <div className="text-center">
              <Button variant="outline" onClick={reset}>üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ</Button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {results.map((game) => (
                <Card key={game.name} className="rounded-2xl shadow">
                  <CardContent className="p-4 space-y-2">
                    {game.image && (
                      <img src={game.image} alt={game.name} className="w-full h-40 object-cover rounded-lg" />
                    )}
                    <h2 className="text-xl font-semibold">üéÆ {game.name}</h2>
                    <p>üìö –ñ–∞–Ω—Ä: {game.genre}</p>
                    <p>üåç –°–µ—Ç—Ç–∏–Ω–≥: {game.setting}</p>
                    <p>‚è± –í—Ä–µ–º—è: {game.playtime}</p>
                    <p>üß† –°–ª–æ–∂–Ω–æ—Å—Ç—å: {game.difficulty}</p>
                    <p>üë• –ò–≥—Ä–æ–∫–æ–≤: {game.players}</p>
                    <p>‚öôÔ∏è –ú–µ—Ö–∞–Ω–∏–∫–∏: {game.mechanics.join(", ")}</p>
                  </CardContent>
                </Card>
              ))}
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}
